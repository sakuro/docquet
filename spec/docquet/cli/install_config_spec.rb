# frozen_string_literal: true

RSpec.describe Docquet::CLI::InstallConfig do
  let(:install_config_command) { Docquet::CLI::InstallConfig.new }
  let(:mock_generator) { instance_double(Docquet::Generators::RubocopYmlGenerator) }

  before do
    # Mock file operations
    allow(File).to receive(:exist?).and_return(false)
    allow(File).to receive(:write)
    allow(install_config_command).to receive(:puts)
    allow(install_config_command).to receive(:exit)
    allow(install_config_command).to receive(:system).and_return(true)

    # Mock generator
    allow(Docquet::Generators::RubocopYmlGenerator).to receive(:new).and_return(mock_generator)
    allow(mock_generator).to receive(:generate)
  end

  describe "#call" do
    context "with default options" do
      it "executes the initialization process successfully" do
        install_config_command.call

        expect(File).to have_received(:write).with(".rubocop_todo.yml", anything)
        expect(Docquet::Generators::RubocopYmlGenerator).to have_received(:new)
        expect(mock_generator).to have_received(:generate)
        expect(install_config_command).to have_received(:system).with(/rubocop.*--regenerate-todo/)
      end

      it "creates empty TODO file first" do
        install_config_command.call

        expect(File).to have_received(:write).with(
          ".rubocop_todo.yml",
          "# This file contains configuration to temporarily disable cops\n# Configuration will be generated by running: rubocop --regenerate-todo\n"
        )
      end

      it "generates .rubocop.yml using the generator" do
        install_config_command.call

        expect(mock_generator).to have_received(:generate)
      end

      it "generates TODO file using rubocop command" do
        expected_command = /rubocop.*--regenerate-todo.*--no-exclude-limit.*--no-offense-counts.*--no-auto-gen-timestamp/

        install_config_command.call

        expect(install_config_command).to have_received(:system).with(expected_command)
      end
    end

    context "with force option" do
      before do
        allow(File).to receive(:exist?).with(".rubocop.yml").and_return(true)
        allow(File).to receive(:exist?).with(".rubocop_todo.yml").and_return(true)
      end

      it "overwrites existing files" do
        install_config_command.call(force: true)

        expect(install_config_command).not_to have_received(:exit)
        expect(File).to have_received(:write)
        expect(mock_generator).to have_received(:generate)
      end
    end

    context "when files already exist without force option" do
      before do
        allow(File).to receive(:exist?).with(".rubocop.yml").and_return(true)
        allow(File).to receive(:exist?).with(".rubocop_todo.yml").and_return(true)
      end

      it "exits with error" do
        install_config_command.call(force: false)

        expect(install_config_command).to have_received(:exit).with(1)
      end
    end

    context "when TODO generation fails" do
      before do
        allow(install_config_command).to receive(:system).and_return(false)
      end

      it "exits with error" do
        install_config_command.call

        expect(install_config_command).to have_received(:exit).with(1)
      end
    end
  end

  describe "#check_existing_files" do
    context "when no files exist" do
      before do
        allow(File).to receive(:exist?).and_return(false)
      end

      it "does not exit" do
        install_config_command.send(:check_existing_files, false)

        expect(install_config_command).not_to have_received(:exit)
      end
    end

    context "when files exist and force is true" do
      before do
        allow(File).to receive(:exist?).with(".rubocop.yml").and_return(true)
      end

      it "does not exit" do
        install_config_command.send(:check_existing_files, true)

        expect(install_config_command).not_to have_received(:exit)
      end
    end

    context "when files exist and force is false" do
      before do
        allow(File).to receive(:exist?).with(".rubocop.yml").and_return(true)
        allow(File).to receive(:exist?).with(".rubocop_todo.yml").and_return(false)
      end

      it "exits with error message" do
        install_config_command.send(:check_existing_files, false)

        expect(install_config_command).to have_received(:exit).with(1)
      end
    end
  end

  describe "#create_empty_todo_file" do
    it "writes empty TODO file with correct content" do
      install_config_command.send(:create_empty_todo_file)

      expected_content = <<~TODO
        # This file contains configuration to temporarily disable cops
        # Configuration will be generated by running: rubocop --regenerate-todo
      TODO

      expect(File).to have_received(:write).with(".rubocop_todo.yml", expected_content)
    end
  end

  describe "#generate_todo_file" do
    context "when command succeeds" do
      before do
        allow(install_config_command).to receive(:system).and_return(true)
      end

      it "does not exit" do
        install_config_command.send(:generate_todo_file)

        expect(install_config_command).not_to have_received(:exit)
      end
    end

    context "when command fails" do
      before do
        allow(install_config_command).to receive(:system).and_return(false)
      end

      it "exits with error" do
        install_config_command.send(:generate_todo_file)

        expect(install_config_command).to have_received(:exit).with(1)
      end
    end
  end

  describe "#build_todo_command" do
    before do
      allow(install_config_command).to receive(:rubocop_command).and_return("bundle exec rubocop")
    end

    it "builds correct command with all required options" do
      command = install_config_command.send(:build_todo_command)

      expect(command).to eq("bundle exec rubocop --regenerate-todo --no-exclude-limit --no-offense-counts --no-auto-gen-timestamp")
    end
  end

  describe "#show_completion_message" do
    it "displays completion message" do
      allow(install_config_command).to receive(:puts).with(/RuboCop setup complete/)

      install_config_command.send(:show_completion_message)

      expect(install_config_command).to have_received(:puts).with(/RuboCop setup complete/)
    end
  end
end
