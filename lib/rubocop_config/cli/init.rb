# frozen_string_literal: true

require_relative "base"
require_relative "../generators/rubocop_yml_generator"

module RubocopConfig
  module CLI
    class Init < Base
      desc "Initialize RuboCop configuration and generate TODO file"
      
      option :force, type: :boolean, default: false, desc: "Overwrite existing files"
      
      def call(force: false, **)
        check_existing_files(force)
        
        # Processing order is important for correct TODO file generation:
        # 1. Create empty .rubocop_todo.yml first to prevent reference errors
        # 2. Generate .rubocop.yml with gem configuration 
        # 3. Generate actual .rubocop_todo.yml with gem rules applied
        # This ensures TODO file reflects violations against gem configuration
        
        create_empty_todo_file
        
        generator = Generators::RubocopYmlGenerator.new
        generator.generate
        success "Generated .rubocop.yml"
        
        generate_todo_file
        
        show_completion_message
      end

      private

      def check_existing_files(force)
        existing_files = []
        existing_files << ".rubocop.yml" if File.exist?(".rubocop.yml")
        existing_files << ".rubocop_todo.yml" if File.exist?(".rubocop_todo.yml")
        
        if existing_files.any? && !force
          error "Files already exist: #{existing_files.join(', ')}. Use --force to overwrite."
        end
      end

      def create_empty_todo_file
        content = <<~TODO
          # This file contains configuration to temporarily disable cops
          # Configuration will be generated by running: rubocop --regenerate-todo
        TODO
        
        File.write(".rubocop_todo.yml", content)
      end

      def generate_todo_file
        info "Generating .rubocop_todo.yml..."
        
        command = build_todo_command
        if system(command)
          success "Generated .rubocop_todo.yml"
        else
          error "Failed to generate .rubocop_todo.yml"
        end
      end

      def build_todo_command
        base_cmd = bundle_exec_available? ? "bundle exec rubocop" : "rubocop"
        "#{base_cmd} --auto-gen-config --no-exclude-limit --no-offense-counts --no-auto-gen-timestamp"
      end

      def show_completion_message
        info ""
        info "âœ“ RuboCop setup complete!"
        info ""
        info "Next steps:"
        info "  1. Review .rubocop_todo.yml and gradually fix violations"
        info "  2. Use 'rubocop-config regenerate-todo' for future updates"
        info "  3. Run 'bundle exec rubocop' to check your code"
      end
    end
  end
end